CREATE TABLE book
(
    book_id SERIAL PRIMARY KEY ,
    title   VARCHAR(50),
    author  VARCHAR(30),
    price   DECIMAL(8, 2),
    amount  INT
);


/*
 Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С».
 Считать, что в названии слова отделяются друг от друга пробелами и не содержат знаков препинания,
 между фамилией автора и инициалами обязателен пробел, инициалы записываются без пробела в формате:
 буква, точка, буква, точка.
 Информацию отсортировать по названию книги в алфавитном порядке.
 */
SELECT title, author
FROM book
WHERE (title LIKE "_% _%") && (author LIKE "_% %С.%")
ORDER BY title;

/*
 Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.
 Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.
 */

SELECT author AS 'Автор', COUNT(title) AS 'Различных_книг', SUM(amount) AS 'Количество_экземпляров'
FROM book
GROUP BY author;

/*
 Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость),
 а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) ,
 который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него.
 Значения округлить до двух знаков после запятой.
 В запросе для расчета НДС(tax)  и Стоимости без НДС(S_without_tax) использовать следующие формулы:
 */

SELECT author,
       ROUND(SUM(price * amount), 2) AS 'Стоимость', ROUND((SUM(price * amount) * 18 / 100) / (1 + 18 / 100), 2) AS 'НДС', ROUND(SUM(price * amount) / (1 + 18 / 100), 2) AS 'Стоимость_без_НДС'
FROM book
GROUP BY author;

/*
 Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия».
 В результат включить только тех авторов, у которых суммарная стоимость книг более 5000 руб.
 Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.
*/
SELECT author, SUM(amount * price) AS 'Стоимость'
FROM book
WHERE title NOT IN ('Идиот', 'Белая гвардия')
GROUP BY author
HAVING 2 > 5000
ORDER BY 1 DESC;

/*
 Вывести информацию (автора, название и цену) о  книгах,
 цены которых меньше или равны средней цене книг на складе. Информацию вывести
 в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги
 */

SELECT author, title, price
FROM book
WHERE price <= (
    SELECT ROUND(AVG(price), 2)
    FROM book
)
ORDER BY price DESC;

/*
 Вывести информацию (автора, название и цену) о тех книгах,
 цены которых превышают минимальную цену книги на складе
 не более чем на 150 рублей в отсортированном по возрастанию цены виде.
 */
SELECT author, title, price
FROM book
WHERE price - (SELECT MIN(price) FROM book) <= 150
ORDER BY price;

/*
 Вывести информацию (автора, книгу и количество) о тех книгах,
 количество экземпляров которых в таблице book не дублируется
 */
SELECT author, title, amount
FROM book
WHERE amount IN (
    SELECT amount
    FROM book
    GROUP BY amount
    HAVING COUNT(amount) = 1
);

/*
 Вывести информацию о книгах(автор, название, цена),
 цена которых меньше самой большой из минимальных цен, вычисленных для каждого автора.
 */

SELECT author, title, price
FROM book
WHERE price < ANY (
    SELECT MIN(price)
    FROM book
    GROUP BY author
);

/*
 Посчитать сколько и каких экземпляров книг нужно заказать поставщикам,
 чтобы на складе стало одинаковое количество экземпляров каждой книги,
 равное значению самого большего количества экземпляров одной книги на складе.
 Вывести название книги, ее автора,
 текущее количество экземпляров на складе и количество заказываемых экземпляров книг.
 Последнему столбцу присвоить имя Заказ
 */

SELECT title, author, amount,
       (SELECT MAX(amount) FROM book) - amount AS Заказ
FROM book
HAVING Заказ > 0;

/*Занести из таблицы supply в таблицу book только те книги, авторов которых нет в  book*/
INSERT INTO book (title, author, price, amount)
SELECT title, author, price, amount
FROM supply
WHERE author NOT IN (
    SELECT DISTINCT author
    FROM book
);

/*
 В таблице book необходимо скорректировать значение для покупателя
 в столбце buy таким образом, чтобы оно не превышало допустимый остаток в столбце amount.
 А цену тех книг, которые покупатель не заказывал, снизить на 10%.
 */
UPDATE book
SET buy = IF(amount < buy, amount, buy),
    price = IF(buy > 0, price, 0.9 * price);

/*
 Удалить из таблицы supply книги тех авторов,
 общее количество экземпляров книг которых в таблице book превышает 10.
 */
DELETE FROM supply
WHERE author IN (
    SELECT author
    FROM book
    GROUP BY author
    HAVING SUM(amount) > 10
);

/*
 Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице
 book меньше среднего количества экземпляров книг в таблице book.
 В таблицу включить столбец   amount, в котором для всех книг
 указать одинаковое значение - среднее количество экземпляров книг в таблице book.
 */

CREATE TABLE ordering AS
SELECT author, title,  @AVG as amount
FROM book
WHERE amount < (@AVG := (SELECT ROUND(AVG(amount)) FROM book));

/*
 Вывести информацию о командировках во все города кроме
 Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город ,
 длительность командировки в днях, при этом первый и
 последний день относится к периоду командировки).
 Последний столбец назвать Длительность. Информацию вывести в упорядоченном по убыванию
 длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).
 */
SELECT name, city, DATEDIFF(date_last, date_first) + 1 AS Длительность
FROM trip
WHERE city NOT IN ('Москва', 'Санкт-Петербург')
ORDER BY 3 DESC, 1 DESC;

/*
 Вывести название месяца и количество командировок для каждого месяца.
 Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце.
 Информацию вывести сначала в отсортированном по убыванию количества,
 а потом в алфавитном порядке по названию месяца виде. Название столбцов – Месяц и Количество.
 */
SELECT MONTHNAME(date_first) AS Месяц, COUNT(*) AS Количество
FROM trip
GROUP BY MONTHNAME(date_first)
ORDER BY 2 DESC, 1;

/*
 Вывести фамилию с инициалами и общую сумму суточных,
 полученных за все командировки для тех сотрудников,
 которые были в командировках больше чем 3 раза,
 в отсортированном по убыванию сумм суточных виде. Последний столбец назвать Сумма.
 */
SELECT name, SUM(per_diem * (1 + DATEDIFF(date_last, date_first))) AS Сумма
FROM trip
GROUP BY name
HAVING COUNT(*) > 3
ORDER BY 2 DESC;

/*
 Занести в таблицу fine суммы штрафов, которые должен оплатить водитель,
 в соответствии с данными из таблицы traffic_violation.
 При этом суммы заносить только в пустые поля столбца  sum_fine.
 */
UPDATE fine AS f,traffic_violation AS tv
SET f.sum_fine =  tv.sum_fine
WHERE (f.sum_fine IS NULL) AND tv.violation = f.violation;

/*
 В таблице fine увеличить в два раза сумму неоплаченных
 штрафов для отобранных на предыдущем шаге записей.
 Вывести фамилию, номер машины и нарушение только для тех водителей,
 которые на одной машине нарушили одно и то же правило   два и более раз.
 При этом учитывать все нарушения, независимо от того оплачены они или нет.
 Информацию отсортировать в алфавитном порядке,
 сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.
 */
UPDATE
    fine f,
    (SELECT name, number_plate, violation
     FROM fine
     GROUP BY name, number_plate, violation
     HAVING COUNT(*) > 1) q_in
SET f.sum_fine = f.sum_fine * 2
WHERE
        (f.name, f.number_plate, f.violation) =
        (q_in.name, q_in.number_plate, q_in.violation) AND
    f.date_payment IS Null;


